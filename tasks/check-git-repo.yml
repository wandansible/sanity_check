---
- name: Check for .git directory in ansible playbook directory
  ansible.builtin.stat:
    path: "{{ sanity_check_ansible_playbook_dir }}/.git"
  register: _sanity_check_git_dir

- name: Check if ansible playbook directory is checked out from git
  ansible.builtin.assert:
    that: _sanity_check_git_dir.stat.exists
    fail_msg: >-
      The ansible playbook directory {{ sanity_check_ansible_playbook_dir }}
      isn't checked out from git
    success_msg: "The ansible playbook directory is checked out from git"

- name: Set git repo facts
  ansible.builtin.set_fact:
    _sanity_check_ansible_git_repo_branch: >-
      {{ lookup("pipe", "git rev-parse --abbrev-ref HEAD") }}
    _sanity_check_ansible_git_repo_hash: >-
      {{ lookup("pipe", "git describe --always --dirty=-dirty") }}

- name: Check ansible playbook directory git branch
  ansible.builtin.assert:
    that: _sanity_check_ansible_git_repo_branch == sanity_check_git_branch
    fail_msg: >-
      Current git branch {{ _sanity_check_ansible_git_repo_branch }}
      is not {{ sanity_check_git_branch }}
    success_msg: "Current git branch is {{ sanity_check_git_branch }}"
  register: _sanity_check_git_branch
  failed_when: false
  changed_when: >-
    "evaluated_to" in _sanity_check_git_branch

- name: Check if ansible playbook directory git tree has local changes
  ansible.builtin.assert:
    that: >-
      "dirty" not in _sanity_check_ansible_git_repo_hash
    fail_msg: "Local git working tree has local changes"
    success_msg: "Local git working tree has no local changes"
  register: _sanity_check_dirty_git_tree
  failed_when: false
  changed_when: >-
    "evaluated_to" in _sanity_check_dirty_git_tree

- name: Ask user if they want to continue after failed git repo sanity check
  ansible.builtin.pause:
    prompt: >-
      One or more git repo sanity checks failed,
      do you wish to continue with the play? (y/n)
  register: _sanity_check_git_repo_continue
  when: _sanity_check_git_branch.changed or _sanity_check_dirty_git_tree.changed

- name: Check user response to see if we should continue or not
  ansible.builtin.assert:
    that: >-
      _sanity_check_git_repo_continue.user_input | bool
      or _sanity_check_git_repo_continue.user_input == "y"
    fail_msg: >-
      User response "{{ _sanity_check_git_repo_continue.user_input }}" is not "yes"
    success_msg: "Git repo sanity check overriden"
  when: >-
    "user_input" in _sanity_check_git_repo_continue
